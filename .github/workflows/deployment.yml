# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Deployment CI

on: [push, pull_request]

jobs:

  # BUILD PROJECT AND DEPENDENCIES
  build:

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]

    steps:
      - uses: actions/checkout@v2

      - name: Cache project node-modules
        uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      # pipeline actions
      - run: npm ci
      - run: npm run build


  # RUN TESTS
  test:

    needs: [build]
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [12.x]
        mongodb-version: [4.0]

    steps:
      - uses: actions/checkout@v2

      - name: Cache project node-modules
        uses: actions/cache@v2
        with:
          path: 'node_modules'
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Start MongoDB (integration tests)
        uses: supercharge/mongodb-github-action@1.6.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}

      - name: Install codecov dependency
        run: npm install -g codecov

      # pipeline actions
      - run: npm run lint
      - run: DATABASE_PORT=27017 npm run test:cov
      - run: codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}


  # DEPLOY PROJECT (DEVELOP)
  deploy:

    needs: [test]
    if: github.ref == 'refs/heads/setup-deploy'

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Create env variables file
        run: ./create-environments.sh
        env:
          NODE_ENV: development
          BACKEND_PORT: ${{ secrets.BACKEND_PORT__DEV }}
          DATABASE_HOST: ${{ secrets.DATABASE_HOST__DEV }}
          DATABASE_PORT: ${{ secrets.DATABASE_PORT__DEV }}
          DATABASE_NAME: ${{ secrets.DATABASE_NAME__DEV }}
          CORS: false
          ORIGINS: *
          BLOG_RESOURCES: ${{ secrets.BLOG_RESOURCES__DEV }}
          SITE_URL: https://dev.binary-coffee.dev
          API_URL: https://api-dev.binary-coffee.dev
          JWT_SECRET: ${{ secrets.JWT_SECRET__DEV }}
          ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET__DEV }}
          SECRET: ${{ secrets.SECRET__DEV }}
          GITHUB_CLIENT_ID: ${{ secrets.GITHUB_CLIENT_ID__DEV }}
          GITHUB_CLIENT_SECRET: ${{ secrets.GITHUB_CLIENT_SECRET__DEV }}

      - name: Copy project to the hosting
        uses: easingthemes/ssh-deploy@v2.1.5
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          ARGS: "-rltgoDzvO"
          SOURCE: ""
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          TARGET: ${{ secrets.REMOTE_TARGET__DEV }}

      - name: Deploy project with docker in hosting
        uses: garygrossgarten/github-action-ssh@release
        with:
          command: cd ${{ secrets.REMOTE_TARGET__DEV }} && ./deploy.sh
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          privateKey: ${{ secrets.SERVER_SSH_KEY}}
